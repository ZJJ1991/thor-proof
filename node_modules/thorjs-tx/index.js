const rlp = require('rlp')
const generateTx = require('./generateTx')
const ethUtil = require('ethereumjs-util')
const BN = require('bn.js')
const blake = require('blakejs')

function ThorTx(data) {
  data = data || {}
  this.raw = []
  this.fields = {}
  generateTx(this, data)
}

ThorTx.prototype.toBuffer = function() {
  return rlp.encode(this.raw)
}

ThorTx.prototype.sign = function(prvKey) {
  let msgHash = this.signatureHash()
  let temp = ethUtil.ecsign(
    new Buffer(msgHash, 'hex'),
    new Buffer(prvKey, 'hex')
  )
  this.sig = Buffer.concat([temp.r, temp.s, Buffer.from([temp.v - 27])])
}

ThorTx.prototype.signatureHash = function() {
  return blake.blake2bHex(this.toBuffer(), null, '32')
}

ThorTx.prototype.serialize = function() {
  let raw = this.raw.concat([this.sig])
  return rlp.encode(raw)
}

function TxBuilder({
  ChainTag,
  BlockRef,
  Expiration,
  Clauses,
  GasPriceCoef,
  Gas,
  DependsOn,
  Nonce
}) {
  return new ThorTx({
    ChainTag,
    BlockRef,
    Expiration,
    Clauses,
    GasPriceCoef,
    Gas,
    DependsOn,
    Nonce,
    Reserved: null
  })
}

module.exports = TxBuilder
