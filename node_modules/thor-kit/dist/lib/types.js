"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Bytes {
    constructor(buf) {
        this.buffer = buf;
    }
    static from(hex, prefix = '0x') {
        if (!hex.startsWith(prefix))
            throw new Error('prefix mismatch');
        hex = hex.substr(prefix.length);
        if (!Bytes.isHex.test(hex))
            throw new Error('not hex format');
        if (hex.length % 2 != 0) {
            throw new Error('odd hex');
        }
        return new Bytes(new Buffer(hex, 'hex'));
    }
    toString(prefix = '0x') {
        return (prefix || '') + this.buffer.toString('hex');
    }
    trimLeft(v = 0) {
        let i = 0;
        for (; i < this.buffer.length; i++) {
            if (this.buffer[i] != v)
                break;
        }
        return new Bytes(this.buffer.slice(i));
    }
}
Bytes.isHex = /^[0-9a-f]*$/i;
exports.Bytes = Bytes;
class Address {
    static from(hex, prefix = '0x') {
        let bytes = Bytes.from(hex, prefix);
        if (bytes.buffer.length != 20)
            throw new Error("address should be 20 bytes");
        return new Address(bytes.buffer);
    }
    constructor(buf) {
        let newBuf = new Buffer(20);
        buf.copy(newBuf, newBuf.length > buf.length ? newBuf.length - buf.length : 0, buf.length > newBuf.length ? buf.length - newBuf.length : 0);
        this.buffer = newBuf;
    }
    toString(prefix = '0x') {
        return (prefix || '') + this.buffer.toString('hex');
    }
}
exports.Address = Address;
class Bytes32 {
    static from(hex, prefix = '0x') {
        let bytes = Bytes.from(hex, prefix);
        if (bytes.buffer.length != 32)
            throw new Error("bytes32 should be 32 bytes");
        return new Bytes32(bytes.buffer);
    }
    constructor(buf) {
        let newBuf = new Buffer(32);
        buf.copy(newBuf, newBuf.length > buf.length ? newBuf.length - buf.length : 0, buf.length > newBuf.length ? buf.length - newBuf.length : 0);
        this.buffer = newBuf;
    }
    toString(prefix = '0x') {
        return (prefix || '') + this.buffer.toString('hex');
    }
}
exports.Bytes32 = Bytes32;
const bignumber_js_1 = require("bignumber.js");
class BigInt {
    static from(v) {
        let bn;
        if (typeof v === 'string') {
            bn = new bignumber_js_1.BigNumber(v);
        }
        else if (typeof v === 'number') {
            bn = new bignumber_js_1.BigNumber(v);
        }
        else {
            bn = v;
        }
        if (!bn.isInteger()) {
            throw new Error('not a integer');
        }
        let hex = bn.toString(16);
        if (hex.length % 2 != 0)
            hex = '0' + hex;
        return new BigInt(new Buffer(hex, 'hex'));
    }
    constructor(buf) {
        this.buffer = new Bytes(buf).trimLeft().buffer;
    }
    toBigNumber() {
        return new bignumber_js_1.BigNumber(this.buffer.toString("hex"), 16);
    }
    toString(base = 16) {
        let prefix = (base == 16) ? '0x' : '';
        return prefix + this.toBigNumber().toString(base);
    }
}
exports.BigInt = BigInt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7SUFrQkksWUFBWSxHQUFXO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFBO0lBQ3JCLENBQUM7SUFqQkQsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFXLEVBQUUsTUFBTSxHQUFHLElBQUk7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUV0QyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFFckMsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQTtTQUM3QjtRQUNELE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQU9ELFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSTtRQUNsQixPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFFRCxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDVCxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVB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