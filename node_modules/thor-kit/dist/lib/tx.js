"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
const crypto_1 = require("./crypto");
const rlp = require('rlp');
class Transaction {
    constructor(body) {
        validateBody(body);
        this.body = body;
    }
    get signingHash() {
        let data = rlp.encode(rlpList(this.body));
        return crypto_1.blake2b256(data);
    }
    get id() {
        return crypto_1.blake2b256(this.signingHash.buffer, this.signer.buffer);
    }
    get signer() {
        if (!this.signature)
            throw new Error('signature missing');
        return crypto_1.ecrecover(this.signingHash, this.signature);
    }
    get intrinsicGas() {
        const txGas = 5000;
        const clauseGas = 16000;
        const clauseGasContractCreation = 48000;
        if (this.body.clauses.length === 0)
            return txGas + clauseGas;
        return this.body.clauses.reduce((sum, c) => {
            sum += dataGas(c.data.buffer);
            if (c.to)
                sum += clauseGas;
            else
                sum += clauseGasContractCreation;
            return sum;
        }, txGas);
    }
    gasPrice(baseGasPrice) {
        let bgp = baseGasPrice.toBigNumber();
        let extra = bgp
            .multipliedBy(this.body.gasPriceCoef)
            .dividedToIntegerBy(0xff);
        return types_1.BigInt.from(bgp.plus(extra));
    }
    sign(privateKey) {
        this.signature = crypto_1.ecsign(this.signingHash, privateKey);
    }
    encode() {
        if (!this.signature)
            throw new Error("signature missing");
        let list = rlpList(this.body);
        list.push(this.signature.buffer);
        let data = rlp.encode(list);
        return new types_1.Bytes(data);
    }
    static decode(raw) {
        let list = decodeList(rlp.decode(raw.buffer), 10);
        let tx = new Transaction({
            chainTag: decodeNumber(list[0]),
            blockRef: new types_1.Bytes(decodeBigInt(list[1]).buffer),
            expiration: decodeNumber(list[2]),
            clauses: decodeClauses(list[3]),
            gasPriceCoef: decodeNumber(list[4]),
            gas: decodeBigInt(list[5]),
            dependsOn: decodeBytes32OrNull(list[6]),
            nonce: decodeBigInt(list[7]),
            reserved: decodeList(list[8])
        });
        tx.signature = new types_1.Bytes(decodeBuffer(list[9]));
        return tx;
    }
}
exports.Transaction = Transaction;
function decodeClauses(data) {
    return decodeList(data).map(v => {
        let clauseData = decodeList(v, 3);
        return {
            to: decodeAddressOrNull(clauseData[0]),
            value: new types_1.BigInt(decodeBuffer(clauseData[1])),
            data: new types_1.Bytes(decodeBuffer(clauseData[2]))
        };
    });
}
function rlpList(body) {
    return [
        body.chainTag,
        body.blockRef.trimLeft().buffer,
        body.expiration,
        body.clauses.map(clause => {
            return [
                clause.to ? clause.to.buffer : "",
                clause.value.buffer,
                clause.data.buffer
            ];
        }),
        body.gasPriceCoef,
        body.gas.buffer,
        body.dependsOn ? body.dependsOn.buffer : "",
        body.nonce.buffer,
        body.reserved,
    ];
}
function validateBody(body) {
    mustUintN(body.chainTag, 8, 'chainTag: must be uint8');
    mustUintN(body.expiration, 32, 'expiration: must be uint32');
    mustUintN(body.gasPriceCoef, 8, 'gasPriceCoef: must be uint8');
    mustUintN(body.gas, 64, 'gas: must be uint64');
    if (body.blockRef.buffer.length > 8)
        throw new Error('blockRef: out of range');
    if (body.nonce.buffer.length > 8)
        throw new Error('nonce: out of range');
}
function mustUintN(num, bit, msg) {
    if (typeof num === 'number') {
        if (!Number.isInteger(num) || num < 0 || num >= Math.pow(2, bit))
            throw new Error(msg);
    }
    else {
        if (num.buffer.length * 8 > bit)
            throw new Error(msg);
    }
}
function decodeBigInt(data) {
    let buf = decodeBuffer(data);
    let bi = new types_1.BigInt(buf);
    if (bi.buffer.length != buf.length)
        throw new Error('non-canonical integer (leading zero bytes) for integer');
    return bi;
}
function decodeNumber(data) {
    let bi = decodeBigInt(data);
    if (bi.buffer.length * 8 > 53)
        throw new Error('unable to safely decode to number');
    return bi.toBigNumber().toNumber();
}
function decodeBuffer(data) {
    if (!Buffer.isBuffer(data))
        throw new Error('buffer expected');
    return data;
}
function decodeBytes32OrNull(data) {
    let buf = decodeBuffer(data);
    if (buf.length == 0)
        return null;
    if (buf.length != 32)
        throw new Error('bytes32 expected');
    return new types_1.Bytes32(buf);
}
function decodeList(data, elemCount) {
    if (!Array.isArray(data))
        throw new Error('list expected');
    if (elemCount !== undefined) {
        if (data.length !== elemCount)
            throw new Error('list element count incorrect');
    }
    return data;
}
function decodeAddressOrNull(data) {
    let buf = decodeBuffer(data);
    if (buf.length == 0)
        return null;
    if (buf.length != 20)
        throw new Error('address expected');
    return new types_1.Address(buf);
}
function dataGas(data) {
    const zgas = 4;
    const nzgas = 68;
    return data.reduce((sum, cur) => {
        if (cur)
            return sum + nzgas;
        return sum + zgas;
    }, 0);
}
//# sourceMappingURL=data:application/json;base64,