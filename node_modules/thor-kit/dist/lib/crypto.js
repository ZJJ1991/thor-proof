"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
const keccak = require('keccak');
const secp256k1 = require('secp256k1');
const blake = require('blakejs');
function blake2b256(...data) {
    let ctx = blake.blake2bInit(32, null);
    data.forEach(d => blake.blake2bUpdate(ctx, d));
    return new types_1.Bytes32(new Buffer(blake.blake2bFinal(ctx)));
}
exports.blake2b256 = blake2b256;
function keccak256(...data) {
    let h = keccak('keccak256');
    data.forEach(d => h.update(d));
    return new types_1.Bytes32(h.digest());
}
exports.keccak256 = keccak256;
function ecsign(msgHash, privateKey) {
    let sig = secp256k1.sign(msgHash.buffer, privateKey.buffer);
    let packed = new Buffer(65);
    sig.signature.copy(packed);
    packed[64] = sig.recovery;
    return new types_1.Bytes(packed);
}
exports.ecsign = ecsign;
function ecrecover(msgHash, sig) {
    if (sig.buffer.length != 65)
        throw new Error("invalid signature");
    let recovery = sig.buffer[64];
    if (recovery !== 0 && recovery !== 1)
        throw new Error("invalid signature recovery");
    let pub = secp256k1.recover(msgHash.buffer, sig.buffer.slice(0, 64), recovery, false);
    return new types_1.Address(keccak256(pub.slice(1)).buffer.slice(12));
}
exports.ecrecover = ecrecover;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9jcnlwdG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBaUQ7QUFDakQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ2hDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUN0QyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7QUFFaEMsb0JBQTJCLEdBQUcsSUFBeUI7SUFDbkQsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDOUMsT0FBTyxJQUFJLGVBQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMzRCxDQUFDO0FBSkQsZ0NBSUM7QUFFRCxtQkFBMEIsR0FBRyxJQUF5QjtJQUNsRCxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUM5QixPQUFPLElBQUksZUFBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO0FBQ2xDLENBQUM7QUFKRCw4QkFJQztBQUVELGdCQUF1QixPQUFnQixFQUFFLFVBQW1CO0lBQ3hELElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDM0QsSUFBSSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDM0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDMUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUE7SUFDekIsT0FBTyxJQUFJLGFBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUM1QixDQUFDO0FBTkQsd0JBTUM7QUFFRCxtQkFBMEIsT0FBZ0IsRUFBRSxHQUFVO0lBQ2xELElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksRUFBRTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUE7SUFDeEMsSUFBSSxRQUFRLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM3QixJQUFJLFFBQVEsS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLENBQUM7UUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO0lBRWpELElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ3JGLE9BQU8sSUFBSSxlQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDaEUsQ0FBQztBQVRELDhCQVNDIn0=