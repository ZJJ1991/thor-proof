import { Bytes, Address, BigInt, Bytes32 } from "./types";
export declare class Transaction {
    readonly body: Transaction.Body;
    signature?: Bytes;
    constructor(body: Transaction.Body);
    readonly signingHash: Bytes32;
    readonly id: Bytes32;
    readonly signer: Address;
    readonly intrinsicGas: number;
    gasPrice(baseGasPrice: BigInt): BigInt;
    sign(privateKey: Bytes32): void;
    encode(): Bytes;
    static decode(raw: Bytes): Transaction;
}
export declare namespace Transaction {
    type Clause = {
        to: Address | null;
        value: BigInt;
        data: Bytes;
    };
    type Body = {
        chainTag: number;
        blockRef: Bytes;
        expiration: number;
        clauses: Clause[];
        gasPriceCoef: number;
        gas: BigInt;
        dependsOn: Bytes32 | null;
        nonce: BigInt;
        reserved: Bytes[];
    };
}
