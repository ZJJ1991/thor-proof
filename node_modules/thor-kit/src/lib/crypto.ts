import { Bytes32, Bytes, Address } from './types'
const keccak = require('keccak')
const secp256k1 = require('secp256k1')
const blake = require('blakejs')

export function blake2b256(...data: (Buffer | string)[]): Bytes32 {
    let ctx = blake.blake2bInit(32, null)
    data.forEach(d => blake.blake2bUpdate(ctx, d))
    return new Bytes32(new Buffer(blake.blake2bFinal(ctx)))
}

export function keccak256(...data: (Buffer | string)[]): Bytes32 {
    let h = keccak('keccak256')
    data.forEach(d => h.update(d))
    return new Bytes32(h.digest())
}

export function ecsign(msgHash: Bytes32, privateKey: Bytes32): Bytes {
    let sig = secp256k1.sign(msgHash.buffer, privateKey.buffer)
    let packed = new Buffer(65)
    sig.signature.copy(packed)
    packed[64] = sig.recovery
    return new Bytes(packed)
}

export function ecrecover(msgHash: Bytes32, sig: Bytes): Address {
    if (sig.buffer.length != 65)
        throw new Error("invalid signature")
    let recovery = sig.buffer[64]
    if (recovery !== 0 && recovery !== 1)
        throw new Error("invalid signature recovery")

    let pub = secp256k1.recover(msgHash.buffer, sig.buffer.slice(0, 64), recovery, false)
    return new Address(keccak256(pub.slice(1)).buffer.slice(12))
}
