"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Tx = require("thorjs-tx");
const debug = require("debug")("thor:injector");
const EthLib = require("eth-lib/lib");
const utils = require("../utils");
const extendAccounts = function (web3) {
    const proto = Object.getPrototypeOf(web3.eth.accounts);
    // signTransaction supports both callback and promise style
    proto.signTransaction = function signTransaction(tx, privateKey, callback) {
        debug("tx to sign: %O", tx);
        const thorTx = utils.ethToThorTx(tx);
        const sign = function (tx) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!tx.chainTag) {
                    const chainTag = yield web3.eth.getChainTag();
                    if (chainTag) {
                        tx.chainTag = chainTag;
                    }
                    else {
                        throw new Error("error getting chainTag");
                    }
                }
                if (!tx.blockRef) {
                    const blockRef = yield web3.eth.getBlockRef();
                    if (blockRef) {
                        tx.blockRef = blockRef;
                    }
                    else {
                        throw new Error("error getting blockRef");
                    }
                }
                if (!tx.gas) {
                    const gas = yield web3.eth.estimateGas({
                        from: EthLib.account.fromPrivate(utils.toPrefixedHex(privateKey)).address,
                        to: tx.clauses.length ? tx.clauses[0].to : "",
                        value: tx.clauses.length ? tx.clauses[0].value : 0,
                        data: tx.clauses.length ? tx.clauses[0].data : "0x",
                    });
                    if (gas) {
                        tx.gas = gas;
                    }
                    else {
                        throw new Error("error getting gas");
                    }
                }
                if (!tx.nonce) {
                    tx.nonce = utils.newNonce();
                }
                debug(tx);
                const thorTx = Tx({
                    ChainTag: tx.chainTag,
                    BlockRef: tx.blockRef,
                    Expiration: tx.expiration,
                    Clauses: tx.clauses,
                    GasPriceCoef: tx.gasPriceCoef,
                    Gas: tx.gas,
                    DependsOn: tx.dependsOn,
                    Nonce: tx.nonce,
                });
                thorTx.sign(utils.sanitizeHex(privateKey));
                const rawTx = thorTx.serialize();
                const result = {
                    rawTransaction: utils.toPrefixedHex(rawTx.toString("hex")),
                    messageHash: utils.toPrefixedHex(thorTx.signatureHash()),
                };
                return result;
            });
        };
        // for supporting both callback and promise
        if (callback instanceof Function) {
            sign(thorTx).then((ret) => {
                return callback(null, ret);
            }).catch((e) => {
                return callback(e);
            });
        }
        else {
            return sign(thorTx);
        }
    };
    proto.recoverTransaction = function recoverTransaction(encodedRawTx) {
        const values = EthLib.RLP.decode(encodedRawTx);
        const signingDataHex = EthLib.RLP.encode(values.slice(0, 9));
        const signingHash = utils.hash(Buffer.from(utils.sanitizeHex(signingDataHex), "hex"));
        const signature = values[9];
        const singingHashBuffer = Buffer.from(utils.sanitizeHex(signingHash), "hex");
        const signatureBuffer = Buffer.from(utils.sanitizeHex(signature), "hex");
        const address = utils.recover(singingHashBuffer, signatureBuffer);
        return address;
    };
    proto.hashMessage = function hashMessage(data) {
        const message = web3.extend.utils.isHexStrict(data) ? web3.extend.utils.hexToBytes(data) : data;
        const messageBuffer = Buffer.from(message);
        return utils.hash(messageBuffer);
    };
    proto.sign = function sign(data, privateKey) {
        const hash = this.hashMessage(data);
        const hashBuffer = Buffer.from(utils.sanitizeHex(hash), "hex");
        const privateKeyBuffer = Buffer.from(utils.sanitizeHex(privateKey), "hex");
        const signature = utils.sign(hashBuffer, privateKeyBuffer);
        return {
            message: data,
            messageHash: utils.toPrefixedHex(hash),
            signature: utils.toPrefixedHex(signature),
        };
    };
    proto.recover = function recover(message, signature, preFixed) {
        const args = [].slice.apply(arguments);
        if (web3.extend.utils._.isObject(message)) {
            return this.recover(message.messageHash, message.signature, true);
        }
        if (!preFixed) {
            message = this.hashMessage(message);
        }
        const hexBuffer = Buffer.from(utils.sanitizeHex(message), "hex");
        const signatureBuffer = Buffer.from(utils.sanitizeHex(signature), "hex");
        return utils.recover(hexBuffer, signatureBuffer);
    };
};
exports.extendAccounts = extendAccounts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXh0ZW5kL2FjY291bnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7OztBQUViLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNoQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDaEQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRXRDLGtDQUFrQztBQUVsQyxNQUFNLGNBQWMsR0FBRyxVQUFTLElBQVM7SUFFdkMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXZELDJEQUEyRDtJQUMzRCxLQUFLLENBQUMsZUFBZSxHQUFHLHlCQUF5QixFQUFtQixFQUFFLFVBQWtCLEVBQUUsUUFBa0I7UUFDMUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTVCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFckMsTUFBTSxJQUFJLEdBQUcsVUFBZSxFQUFvQjs7Z0JBQzlDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFO29CQUNoQixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7b0JBQzlDLElBQUksUUFBUSxFQUFFO3dCQUNaLEVBQUUsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO3FCQUN4Qjt5QkFBTTt3QkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7cUJBQzNDO2lCQUNGO2dCQUNELElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFO29CQUNoQixNQUFNLFFBQVEsR0FB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