"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:max-line-length */
const web3Utils = require("web3-utils");
const utils = require("./");
const isArray = function (o) {
    return Object.prototype.toString.call(o) === "[object Array]";
};
exports.formatBlockNumber = function (blockNumber) {
    if (typeof blockNumber === "number") {
        return blockNumber;
    }
    else if (typeof blockNumber === "string") {
        if (blockNumber === "earliest") {
            return 0;
        }
        else if (blockNumber === "latest" || blockNumber === "pending") {
            return "best";
        }
        else {
            return blockNumber;
        }
    }
    else {
        return "best";
    }
};
exports.formatRange = function (range) {
    const ret = {};
    if (range.unit !== "block" && range.unit !== "time") {
        return null;
    }
    else {
        ret.unit = range.unit;
    }
    try {
        const from = exports.formatBlockNumber(range.from);
        if (from !== "best") {
            ret.from = Number.parseInt(from);
        }
    }
    catch (_a) {
        ret.from = 0;
    }
    try {
        const to = exports.formatBlockNumber(range.to);
        if (to !== "best") {
            ret.to = Number.parseInt(range.to);
        }
    }
    catch (_b) {
        ret.to = utils.MaxUint32;
    }
    return ret;
};
exports.formatOptions = function (options) {
    const ret = {};
    if (options.limit) {
        try {
            ret.limit = Number.parseInt(options.limit);
        }
        finally { } /* tslint:disable:no-empty */
    }
    if (options.offset) {
        try {
            ret.offset = Number.parseInt(options.offset);
        }
        finally { } /* tslint:disable:no-empty */
    }
    return ret;
};
exports.formatLogQuery = function (params) {
    const body = {
        topicSets: [],
    };
    if (params.range) {
        const ret = exports.formatRange(params.range);
        if (ret) {
            body.range = ret;
        }
    }
    if (params.options) {
        const ret = exports.formatOptions(params.options);
        if (ret) {
            body.options = ret;
        }
    }
    if (!body.range) {
        if (params.fromBlock) {
            try {
                const from = exports.formatBlockNumber(params.fromBlock);
                if (from !== "best") {
                    body.range = body.range ? body.range : {};
                    body.range.from = Number.parseInt(from);
                }
            }
            finally { } /* tslint:disable:no-empty */
        }
        if (params.toBlock) {
            try {
                const to = exports.formatBlockNumber(params.toBlock);
                if (to !== "best") {
                    body.range = body.range ? body.range : {};
                    body.range.to = Number.parseInt(to);
                }
            }
            finally { } /* tslint:disable:no-empty */
        }
        if (body.range) {
            body.range.unit = "block";
        }
    }
    body.topicSets = [];
    const topics = [];
    for (let i = 0; i < params.topics.length; i++) {
        if (typeof params.topics[i] === "string") {
            topics.push({
                name: "topic" + i,
                array: [params.topics[i]],
            });
        }
        else if (isArray(params.topics[i]) && params.topics[i].length) {
            topics.push({
                name: "topic" + i,
                array: params.topics[i],
            });
        }
    }
    const outputTopic = function (topics, index, receiver, current) {
        if (index === topics.length) {
            const o = {};
            Object.assign(o, current);
            receiver.push(o);
            return;
        }
        for (const item of topics[index].array) {
            current[topics[index].name] = item;
            outputTopic(topics, index + 1, receiver, current);
        }
    };
    if (topics.length) {
        outputTopic(topics, 0, body.topicSets, {});
    }
    return body;
};
const maxUint8 = new web3Utils.BN(2).pow(new web3Utils.BN(8));
const maxUint32 = new web3Utils.BN(2).pow(new web3Utils.BN(32));
const maxUint64 = new web3Utils.BN(2).pow(new web3Utils.BN(64));
const toUint8 = function (input) {
    if (typeof input !== "number" && !input) {
        return null;
    }
    return "0x" + web3Utils.toBN(input).mod(maxUint8).toString(16);
};
const toUint64 = function (input) {
    if (typeof input !== "number" && !input) {
        return null;
    }
    return "0x" + web3Utils.toBN(input).mod(maxUint64).toString(16);
};
const toUint32 = function (input) {
    if (typeof input !== "number" && !input) {
        return null;
    }
    return "0x" + web3Utils.toBN(input).mod(maxUint32).toString(16);
};
exports.ethToThorTx = function (ethTx) {
    const thorTx = {
        clauses: [],
    };
    if (ethTx.chainTag === 0 || ethTx.chainTag) {
        const chainTag = toUint8(ethTx.chainTag);
        if (chainTag) {
            thorTx.chainTag = chainTag;
        }
    }
    if (ethTx.blockRef === 0 || ethTx.blockRef) {
        const blockRef = toUint64(ethTx.blockRef);
        if (blockRef) {
            thorTx.blockRef = blockRef;
        }
    }
    if (ethTx.expiration === 0 || ethTx.expiration) {
        const expiration = toUint32(ethTx.expiration);
        thorTx.expiration = expiration || utils.params.defaultExpiration;
    }
    else {
        thorTx.expiration = utils.params.defaultExpiration;
    }
    if (ethTx.gasPriceCoef === 0 || ethTx.gasPriceCoef) {
        const gasPriceCoef = toUint8(ethTx.gasPriceCoef);
        thorTx.gasPriceCoef = gasPriceCoef || utils.params.defaultGasPriceCoef;
    }
    else {
        thorTx.gasPriceCoef = utils.params.defaultGasPriceCoef;
    }
    if (ethTx.gas) {
        const gas = toUint64(ethTx.gas);
        if (gas) {
            thorTx.gas = gas;
        }
    }
    if (ethTx.dependsOn) {
        if (web3Utils.isHex(ethTx.dependsOn)) {
            thorTx.dependsOn = ethTx.dependsOn;
        }
    }
    if (ethTx.nonce) {
        const nonce = toUint64(ethTx.nonce);
        if (nonce) {
            thorTx.nonce = nonce;
        }
    }
    const clause = {
        value: 0,
    };
    if (ethTx.to) {
        clause.to = ethTx.to;
    }
    if (ethTx.data) {
        if (!web3Utils.isHex(ethTx.data)) {
            throw new Error("The data field must be HEX encoded data.");
        }
        else {
            clause.data = ethTx.data;
        }
    }
    const value = web3Utils.numberToHex(ethTx.value);
    if (value) {
        clause.value = value;
    }
    thorTx.clauses.push(clause);
    return thorTx;
};
//# sourceMappingURL=data:application/json;base64,