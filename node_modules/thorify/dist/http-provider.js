"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:max-line-length */
// forked from ethjs-provider-http
// workaround to use http provider in different envs
const XHR2 = require("xhr2");
const debug = require("debug")("thor:http-provider");
const thor_interceptor_1 = require("./thor-interceptor");
class ThorHttpProvider {
    constructor(host, timeout = 0) {
        if (!(this instanceof ThorHttpProvider)) {
            throw new Error('[thorify-provider-http] the ThorHttpProvider instance requires the "new" flag in order to function normally (e.g. `const thor = new Web3(new ThorHttpProvider());`).');
        }
        if (typeof host !== "string") {
            throw new Error('[thorify-provider-http] the ThorHttpProvider instance requires that the host be specified (e.g. `new HttpProvider("http://localhost:8545")` or via service like infura `new HttpProvider("http://ropsten.infura.io")`)');
        }
        this.host = host;
        this.timeout = timeout;
    }
    sendAsync(payload, callback) {
        debug("payload: %O", payload);
        if (!thor_interceptor_1.ThorAPIMapping[payload.method]) {
            return callback(new Error("Method not supported!"), {
                id: payload.id || 0,
                jsonrpc: payload.jsonrpc || "2.0",
                result: null,
            });
        }
        const Interceptor = thor_interceptor_1.ThorAPIMapping[payload.method];
        const ret = Interceptor.formatXHR(payload, this.host, this.timeout);
        const request = ret.Request;
        request.onreadystatechange = () => {
            if (request.readyState === 4 && request.timeout !== 1) {
                let result = request.responseText;
                let error = null;
                try {
                    result = JSON.parse(result);
                }
                catch (e) {
                    error = invalidResponseError(request.responseText, this.host);
                }
                debug("result: %O", result);
                result = ret.ResFormatter(result);
                callback(error, {
                    id: payload.id || 0,
                    jsonrpc: payload.jsonrpc || "2.0",
                    result,
                });
            }
        };
        request.ontimeout = () => {
            callback(`[thorify-provider-http] CONNECTION TIMEOUT: http request timeout after ${this.timeout} ms. (i.e. your connect has timed out for whatever reason, check your provider).`, null);
        };
        try {
            request.send(ret.Method === "POST" ? JSON.stringify(ret.Body) : null);
        }
        catch (error) {
            callback(`[thorify-provider-http] CONNECTION ERROR: Couldn't connect to node '${this.host}': ${JSON.stringify(error, null, 2)}`, null);
        }
    }
}
exports.ThorHttpProvider = ThorHttpProvider;
/**
 * InvalidResponseError helper for invalid errors.
 */
function invalidResponseError(result, host) {
    const message = !!result && !!result.error && !!result.error.message ? `[thorify-provider-http] ${result.error.message}` : `[thorify-provider-http] Invalid JSON RPC response from host provider ${host}: ${JSON.stringify(result, null, 2)}`;
    return new Error(message);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9odHRwLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFDYixvQ0FBb0M7QUFDcEMsa0NBQWtDO0FBRWxDLG9EQUFvRDtBQUNwRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDckQseURBQW1EO0FBRW5EO0lBSUUsWUFBWSxJQUFZLEVBQUUsT0FBTyxHQUFHLENBQUM7UUFDbkMsSUFBSSxDQUFDLENBQUMsSUFBSSxZQUFZLGdCQUFnQixDQUFDLEVBQUU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHNLQUFzSyxDQUFDLENBQUM7U0FBRTtRQUNyTyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsd05BQXdOLENBQUMsQ0FBQztTQUFFO1FBRTVRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFTSxTQUFTLENBQUMsT0FBWSxFQUFFLFFBQWE7UUFDMUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsaUNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDbkMsT0FBTyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsRUFBRTtnQkFDbEQsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQztnQkFDbkIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLElBQUksS0FBSztnQkFDakMsTUFBTSxFQUFFLElBQUk7YUFDYixDQUFDLENBQUM7U0FDSjtRQUVE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